/* eslint-disable class-methods-use-this */
/* eslint-disable no-useless-catch */

// const mockData = require("../../mock-api/db.json");

/* const User = require("./userAPI.json");
const Hierarchy = require("./hierarchyAPI.json");
const Person = require("./personAPI.json");
 */
const APIData = {
  position: {
    sectionGrouping: [
      {
        name: "Version Info",
        sectionId: 1,
        order: 1,
        rowIndex: 1,
        children: [],
        columnSize: 5,
        tabletColumnSize: 6,
        mobileColumnSize: 12,
      },
      {
        name: "Position Info",
        sectionId: 2,
        order: 2,
        rowIndex: 1,
        children: [],
        columnSize: 5,
        tabletColumnSize: 6,
        mobileColumnSize: 12,
      },
    ],
    dataMapping: {
      effectiveStartDate: {
        label: "Effective Start Date",
        sectionId: 1,
        visible: false,
      },
      effectiveEndDate: {
        label: "Effective End Date",
        sectionId: 1,
      },
      description: {
        label: "Description",
        sectionId: 1,
      },
      positionName: {
        label: "Position Name",
        sectionId: 2,
      },
      titles: {
        label: "Title",
        sectionId: 2,
      },
      businessGroup: {
        label: "Business Group",
        sectionId: 2,
      },
      incentiveStartDate: {
        label: "Incentive Start Date",
        sectionId: 2,
      },
      incentiveEndDate: {
        label: "Incentive End Date",
        sectionId: 2,
      },
    },
  },
  user: {
    sectionGrouping: [
      {
        name: "User Info",
        sectionId: 1,
        order: 1,
        rowIndex: 1,
        children: [],
        columnSize: 3,
        tabletColumnSize: 12,
        mobileColumnSize: 12,
      },
      {
        name: "Access",
        sectionId: 2,
        order: 2,
        rowIndex: 1,
        children: [],
        columnSize: 5,
        tabletColumnSize: 12,
        mobileColumnSize: 12,
      },
      {
        name: "Settings",
        sectionId: 3,
        order: 2,
        rowIndex: 1,
        children: [],
        columnSize: 3,
        tabletColumnSize: 12,
        mobileColumnSize: 12,
      },
    ],
    dataMapping: {
      email: {
        label: "Email",
        sectionId: 1,
      },
      name: {
        label: "Name",
        sectionId: 1,
      },
      status: {
        label: "Status",
        sectionId: 2,
      },
      language: {
        label: "Language",
        sectionId: 2,
      },
      userApps: {
        label: "Applications",
        sectionId: 2,
      },
      roles: {
        label: "Roles",
        sectionId: 2,
      },
      loginProfile: {
        label: "Login Profile",
        sectionId: 3,
      },
      lockStatus: {
        label: "Lock Status",
        sectionId: 3,
      },
    },
  },
  person: {
    sectionGrouping: [
      {
        name: "Version Info",
        sectionId: 1, // unique id
        order: 2,
        rowIndex: 1,
        children: [],
        columnSize: 5,
        tabletColumnSize: 6,
        mobileColumnSize: 12,
      },
      {
        name: "Persion Info",
        sectionId: 2,
        order: 1,
        rowIndex: 1,
        children: [],
        columnSize: 5,
        tabletColumnSize: 6,
        mobileColumnSize: 12,
      },
      {
        name: "Custom Fields",
        sectionId: 3,
        order: 1,
        rowIndex: 2,
        children: [],
        columnSize: 12,
        tabletColumnSize: 6,
        mobileColumnSize: 12,
      },
    ],
    dataMapping: {
      effectiveStartDate: {
        label: "Start Date",
        sectionId: 1,
      },
      effectiveEndDate: {
        label: "End Date",
        sectionId: 1,
      },
      firstName: {
        label: "First Name",
        sectionId: 1,
      },
      lastName: {
        label: "Last Name",
        sectionId: 1,
      },
      employeeStatus: {
        label: "Employee Status",
        sectionId: 2,
      },
      region: {
        label: "Region",
        sectionId: 2,
      },
      customFieldsWsoList: {
        label: "Custom Fields",
        sectionId: 3,
      },
    },
  },
  hierarchy: {
    sectionGrouping: [
      {
        name: "Version Info",
        sectionId: 1,
        order: 2,
        rowIndex: 2,
        dataType: "fields",
        children: [],
      },
      {
        name: "Hierarchy",
        sectionId: 2,
        order: 1,
        dataType: "tree",
        rowIndex: 1,
        children: [],
      },
    ],
    dataMapping: {
      startDate: {
        label: "Start Date",
        sectionId: 1,
      },
      endDate: {
        label: "End Date",
        sectionId: 1,
      },
      versionName: {
        label: "Version Name",
        sectionId: 1,
      },
      parent: {
        label: "Parent",
        sectionId: 2,
      },
      root: {
        label: "Root",
        sectionId: 2,
      },
      children: {
        label: "Children",
        sectionId: 2,
      },
    },
  },
};

export default class TransformProfileAPI {
  constructor(apiResponse, type) {
    this.apiResponse = apiResponse;
    this.type = type;
  }

  convertData() {
    // type of API need to transform
    /*   const currentAPI = this.type;
    let APItoUse = null;
    if (this.type === "User") {
      APItoUse = mockData.user;
    } else if (this.type === "Person") {
      APItoUse = mockData.person;
    } else if (this.type === "Position") {
      APItoUse = mockData.position;
    } else if (this.type === "Hierarchy") {
      APItoUse = mockData.hierarchy;
    }
 */
    const finalTransformedArr = [];
    try {
      const util = APIData[this.type];

      console.log(util);

      console.time("transformation time");

      // Looping through datamapping object and comparing with actual API field names
      // loop 1
      Object.keys(util.dataMapping).forEach((key) => {
        // loop 2 with JSON Object properties
        Object.keys(this.apiResponse).forEach((childKey) => {
          // checking if API response field key matches with data mapping variables
          if (key.toLowerCase() === childKey.toLowerCase()) {
            // finding the index for exact match - field with section
            const sectionIndex = util.sectionGrouping.findIndex(
              (e) => e.sectionId === util.dataMapping[key].sectionId
            );

            // const sectionIndex = finalTransformedObj.findIndex(e => e.section === util[key]["section"])

            // matching field section index to map them into correct sections

            if (sectionIndex > -1) {
              if (util.dataMapping[key].label.toLowerCase() === "custom fields") {
                util.sectionGrouping[sectionIndex].children.push({
                  label: "",
                  data: [...this.apiResponse[childKey]],
                });
              } else if (util.dataMapping[key].label.toLowerCase() === "children") {
                util.sectionGrouping[sectionIndex].children.push({
                  label: util.dataMapping[key].label,
                  data: [...this.apiResponse[childKey]],
                });
              } else {
                util.sectionGrouping[sectionIndex].children.push({
                  label: util.dataMapping[key].label,
                  data: this.apiResponse[childKey],
                });
              }
            }
          }
        });
      });

      console.log(util);
      console.log("updated util");

      let previousIndex = null;
      util.sectionGrouping.forEach((val) => {
        if (previousIndex !== val.rowIndex) {
          finalTransformedArr.push([
            {
              rowIndex: val.rowIndex,
              children: [],
            },
          ]);
        }

        finalTransformedArr.forEach((val2) => {
          // console.log(val2);
          if (val.rowIndex === val2[0].rowIndex) {
            val2[0].children.push(val);
          }
        });
        previousIndex = val.rowIndex;
      });

      console.log(JSON.stringify(finalTransformedArr));
      console.log("after transforming");
      console.timeEnd("transformation time");
      return finalTransformedArr;
    } catch (e) {
      throw e;
    }
  }
}

// convertData("Person");




/////

const FormatFunc = (formatValue, type) => {
  const dateFormat = (format = "mm-dd-yyyy") => {
    let passedValue = formatValue;
    if (type.toLowerCase() === "date" && format === "mm-dd-yyyy") {
      if (typeof passedValue === "string") {
        passedValue = parseInt(formatValue, 2);
      }
      const dt = new Date(passedValue);
      return `${dt.getMonth() + 1}-${dt.getDate()}-${dt.getFullYear()}`;
    }
    return passedValue;
  };
  return dateFormat;
};

export default FormatFunc;

////


/* eslint-disable react/prop-types */
import React from "react";
import {
  XCard,
  XCardHeader,
  XCardTitle,
  XRow,
  XCol,
  XCardBlock,
  XCardSubtitle,
  XCardText,
  xyzVr,
  xyzHr,
} from "@xyz-design-system/prism-components";

import { BootstrapProvider } from "@bootstrap-styled/provider/lib/";
import { makeTheme } from "bootstrap-styled/lib/theme/";
import styled from "styled-components";
import FormatFunc from "../../utilities/formatHelper";

import ProfileCollapse from "../Collapse";

const downArrow = (
  <svg width="10" height="6" viewBox="0 0 10 6" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
      d="M8.5 1.5L5 5.00001L1.5 1.5"
      stroke="#333333"
      strokeWidth="1.5"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
);

const upArrow = (
  <svg width="10" height="6" viewBox="0 0 10 6" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path
      d="M8.5 4.5L5 1L1.5 4.5"
      stroke="#333333"
      strokeWidth="1.5"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
);

const ProfileCardSubTitle = styled(XCardSubtitle)`
  color: #717171;
  margin-bottom: 0px;
  font-size: 12px;
`;

const DynamicCard = ({ cardData = [], cardTitle }) => {
  const cardTheme = makeTheme({
    "$primary-depth-shadow": "0px 2px 4px rgba(0, 0, 0, 0.2);",
    "$card-border-top-color": "#177B8F",
    "$card-border-top-width": "2px",
    "$card-bg": "white",
    "$card-title-font-size": "16px",
    "$card-text-padding-top": "5px",
    "$card-text-margin-top": "0px",
    "$hr-border-width": "10px",
    "$hr-border-color": "#e5e5e5",
    "$card-spacer-x": "1.25rem",
    "$card-spacer-y": ".75rem",
  });

  // const cardArray = convertData('Person');
  const width = window.innerWidth;
  console.log("changing width");
  console.log(width);
  return (
    <BootstrapProvider theme={cardTheme}>
      <XCard>
        <ProfileCollapse collapseIcon={downArrow} expandIcon={upArrow}>
          <XCardHeader style={{ backgroundColor: "white", border: "0px" }}>
            <XCardTitle>{cardTitle}</XCardTitle>
          </XCardHeader>
          {cardData.map((val, index) => (
            <>
              <XRow key={val[0].rowIndex}>
                {val[0].children
                  .sort((a, b) => a.order - b.order)
                  .map((val2, index2) => (
                    <>
                      <XCol
                        key={val2.name}
                        xs={val2.mobileColumnSize}
                        sm={val2.tabletColumnSize}
                        md={val2.columnSize}
                        lg={val2.columnSize}
                      >
                        <XRow>
                          <XCol>
                            <XCardBlock>
                              <XCardTitle style={{ margin: "0px" }}>{val2.name}</XCardTitle>
                            </XCardBlock>
                          </XCol>
                        </XRow>
                        <XRow>
                          {val2.children.map((val3) => (
                            <XCol key={val3.label} sm={6}>
                              <XCardBlock>
                                <ProfileCardSubTitle>{val3.label}</ProfileCardSubTitle>

                                {typeof val3.data !== "object" &&
                                  val3.label.toLowerCase().indexOf("date") === -1 && (
                                    <XCardText>{val3.data}</XCardText>
                                  )}
                                {val3.label.toLowerCase().indexOf("date") > -1 && (
                                  <XCardText>
                                    {FormatFunc(val3.data, "date")("mm-dd-yyyy")}
                                  </XCardText>
                                )}
                                {typeof val3.data === "object" &&
                                  val3.label.toLowerCase() !== "" && (
                                    <XCardText>{Object.values(val3.data)}</XCardText>
                                  )}
                                {typeof val3.data === "object" && val3.label.toLowerCase() === "" && (
                                  <XRow>
                                    {val3.data.map((val4) => (
                                      <XCol sm={4}>
                                        <XCardBlock key={val4.fieldName}>
                                          <ProfileCardSubTitle>
                                            {val4.fieldName}
                                          </ProfileCardSubTitle>
                                          {val4.fieldName.toLowerCase().indexOf("date") > -1 && (
                                            <XCardText>
                                              {FormatFunc(val4.fieldValue, "date")("mm-dd-yyyy")}
                                            </XCardText>
                                          )}
                                          {typeof val4.fieldName !== "object" &&
                                            val4.fieldName.toLowerCase().indexOf("date") === -1 && (
                                              <XCardText>{val4.fieldValue}</XCardText>
                                            )}
                                        </XCardBlock>
                                      </XCol>
                                    ))}
                                  </XRow>
                                )}
                              </XCardBlock>
                            </XCol>
                          ))}
                        </XRow>
                      </XCol>
                      {width > 768 &&
                      val[0].children.length > 1 &&
                      index2 !== val[0].children.length - 1 ? (
                        <xyzVr style={{ margin: "30px" }} />
                      ) : null}
                      {width < 768 && index2 !== val[0].children.length - 1 ? <xyzHr /> : null}
                    </>
                  ))}
              </XRow>
              {cardData.length > 1 && index !== cardData.length - 1 ? <xyzHr /> : null}
            </>
          ))}
        </ProfileCollapse>
      </XCard>
    </BootstrapProvider>
  );
};

export default DynamicCard;
///////


/* eslint-disable react/require-default-props */
/* eslint-disable react/prop-types */
import React, { useState } from "react";
import { Collapse } from "@bootstrap-styled/v4";
import Row from "@bootstrap-styled/v4/lib/Row";
import Col from "@bootstrap-styled/v4/lib/Col";
import { node, oneOfType, arrayOf } from "prop-types";

const ProfileCollapse = ({ children, collapseIcon, expandIcon }) => {
  const [isOpen, setOpen] = useState(true);
  return (
    <div>
      <Row>
        <Col sm="11">{children[0]}</Col>
        <Col sm="1">
          <span
            style={{ paddingLeft: "95px" }}
            role="presentation"
            onClick={() => setOpen(!isOpen)}
          >
            {isOpen && expandIcon}
            {!isOpen && collapseIcon}
          </span>
        </Col>
      </Row>
      <Collapse isOpen={isOpen}>{children[1]}</Collapse>
    </div>
  );
};

export default ProfileCollapse;

ProfileCollapse.propTypes = {
  children: oneOfType([arrayOf(node), node]),
  collapseIcon: node.isRequired,
  expandIcon: node.isRequired,
};


///
{
  "profiles": [
    {
      "id": 1,
      "name": "Janet Miller"
    },
    {
      "id": 2,
      "name": "Richard Skywalker"
    },
    {
      "id": 3,
      "name": "Stacey McMoy"
    }
  ],
  "periods": [
    {
      "id": 1,
      "name": "Jan 2020 - March 2020"
    },
    {
      "id": 2,
      "name": "April 2020 - June 2020"
    },
    {
      "id": 3,
      "name": "July 2020 - September 2020"
    },
    {
      "id": 4,
      "name": "October 2020 - December 2020"
    }
  ],
  "user": {
    "id": 122165188,
    "email": "srep2@xac.com",
    "name": "SalesRep2",
    "status": "Activated",
    "language": "English (United States)",
    "userApps": [
    "Incent"
    ],
    "roles": {
    "117224893": "Sales Representative"
    },
    "loginProfileId": "11111111111111111111111111111111",
    "loginProfile": "xyz",
    "lockStatus": "Not Locked",
    "primaryRoleType": "INDIVIDUAL_PAYEE",
    "ipAddress": null
    },    
  "position" :{
      "positionId": 193680528,
      "positionName": "hrishikeshmalagiceo",
      "incentiveStartDate": 1585506600000,
      "incentiveEndDate": 1585506600000,
      "businessGroup": "BG1",
      "titles": "hrishikeshtitle",
      "effectiveStartDate": 1585506600000,
      "effectiveEndDate": 1585506600000,
      "titleId": 4322,
      "businessGroupId": 5412,
      "description": "old entry level job"
  },
  "person":{
    "effectiveParticipantId": 193680515,
    
    "user": "hrishikeshmalagi",
    "userId": null,
    "employeeId": "hrishiorg100",
    "middleName": "gururaj",
    "firstName": "hrishikeshmalagi",
    "lastName": "malagi",
    "employeeStatus": "ES-Active",
  
    "hireDate": 1587234600000,
    "terminationDate": 1587493800000,
    "effectiveStartDate": 1583692200000,
    "effectiveEndDate": 2082652200000,
  
    "description": "latest something",
    "versionReason": "hrishitest",
    "versionSubReason": "reasoncode2",
    "region": "EUROPE",
    "prefix": "Mrs.",
    "personalTarget": 10000,
  
    "proratedPersonalTarget": 10000,
  
    "salary": 100,
    "proratedSalary": 100,
    
    "personalCurrency": "USD",
    "paymentCurrency": "USD",
    "salaryCurrency": "USD",
    "businessGroup": "BG1",
    "customFieldsWsoList": [
      {
        "fieldName": "CF1-String",
        "fieldValue": "data1",
        "unitTypeId": null,
        "numberUnitTypeName": null,
        "fieldDataType": "STRING"
      },
      {
        "fieldName": "CF2-Number",
        "fieldValue": "100",
        "unitTypeId": 163357208,
        "numberUnitTypeName": "EUR",
        "fieldDataType": "NUMBER"
      },
      {
        "fieldName": "CF3-Date",
        "fieldValue": "1585506600000",
        "unitTypeId": null,
        "numberUnitTypeName": null,
        "fieldDataType": "DATE"
      },
      {
        "fieldName": "Overall_OTE_110Percent",
        "fieldValue": "100",
        "unitTypeId": 163357210,
        "numberUnitTypeName": "POINTS",
        "fieldDataType": "NUMBER"
      },
      {
        "fieldName": "Draw",
        "fieldValue": "100",
        "unitTypeId": 163357210,
        "numberUnitTypeName": "POINTS",
        "fieldDataType": "NUMBER"
      },
      {
        "fieldName": "Document",
        "fieldValue": "100",
        "unitTypeId": 163357209,
        "numberUnitTypeName": "PERCENT",
        "fieldDataType": "NUMBER"
      },
      {
        "fieldName": "Company",
        "fieldValue": "xyz",
        "unitTypeId": null,
        "numberUnitTypeName": null,
        "fieldDataType": "STRING"
      },
      {
        "fieldName": "vk_cs1",
        "fieldValue": "final testing",
        "unitTypeId": null,
        "numberUnitTypeName": null,
        "fieldDataType": "STRING"
      }
    ]
  },
  "userConfig": {
    "locale": "en_US",
    "dateFormat": "DD-MM-YYYY",
    "userID": 123456,
    "email": "achecka@xyzcorp.com"
  }
}


////


